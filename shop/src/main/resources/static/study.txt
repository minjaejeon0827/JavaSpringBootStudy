[코딩애플] 쉽게 배우는 Spring Boot & JPA
Part 1
1강 - Spring Boot 왜 쓰는데
2강 - 개발환경 셋팅 / Spring Boot 3 프로젝트 생성

* intellij community 에디터 설치 방법
참고 URL - https://blog.naver.com/PostView.naver?blogId=djusti&logNo=223143383341
참고 2 URL - https://priming.tistory.com/50

* spring initializr 이용하여 프로젝트 생성
참고 URL - https://start.spring.io/
참고 2 URL - https://guns23.tistory.com/8
참고 3 URL - https://nohriter.tistory.com/115

* spring boot 공식 문서
참고 URL - https://docs.spring.io/spring-boot/documentation.html

3강 - 자바 기본 문법 1 (변수, 함수, if, for)
4강 - 자바 기본 문법 2 (class, constructor)





[코딩애플] 쉽게 배우는 Spring Boot & JPA
Part 1
3강 - 자바 기본 문법 1 (변수, 함수, if, for)

변수, 함수, if, for 이런 기초 개념은 알고있다고 가정하고 진행할 것이다.
꼭 자바로 변수, 함수 이런걸 배울 필요없고 자바스크립트 같은 다른 언어로 배워와도 전혀 상관없다.
어짜피 다 똑같음
그래서 자바에서 변수, 함수, if, for 어떻게 쓰는지 빠르게 정리하고 가보자.

* 코드 어디에 적냐면

public static void main(String[] args) {
  SpringApplication.run(ShopApplication.class, args);
  코드~~
}

코드를 어디다가 적어야하냐면 어쩌구Application.java 파일(예 - ShopApplication.java)이 있을텐데
거기에 있는 main 함수안에 적으면 실행된다.
자바프로젝트 실행하면 main 함수안의 코드가 자동으로 실행이 되어서 그렇다.

* 변수 문법

자바에서도 당연히 변수를 만들어 쓸 수 있다.
어떤 자료를 잠깐 저장해두고 쓰고싶을 때 변수를 사용한다.

타입 변수명 = 변수에넣을값;
이렇게 코드짜면 변수생성 끝이다.

String name = "kim";
int age = 20;
float num = 1.5;

- 문자는 항상 큰 따옴표("") 안에 넣는다.
- 한 줄 끝나면 세미콜론(;)을 붙여야한다.
- 타입은 변수에 들어갈 자료의 타입(String, int, float 등등...)을 기재하면 된다.

저장할자료         | 타입이름
문자              | String
정수              | int
큰 정수(20억 이상)  | long
소수              | float
오차가 더 적은 소수  | double
true/false        | boolean

기본 타입은 이런 것들이 있다.

String lover = "김말자";
System.out.println(lover);

님들 여친 이름을 변수(lover)에 저장해서 출력해보자.
없으면 이번 기회에 자바로 만들자.
변수나 자료를 출력하고 싶으면 System.out.println() 안에 넣으면 된다.
IntelliJ 에디터에선 sout 라고 쓰고 엔터치면 System.out.println() 자동완성된다.

@SpringBootApplication
public class ShopApplication {

	public static void main(String[] args) {

		SpringApplication.run(ShopApplication.class, args);   // Spring boot로 만든 웹서버 띄우기
	}

}

코드 실행하려면 class 옆에 있는 재생버튼(▷) 누르면 된다.
참고로 한번 누르면 이제 에디터 상단에 있는 재생버튼(▷) 눌러도 된다.
재생버튼(▷) 생긴게 마음에 안들면 Debug 버튼(벌레 모양) 눌러도 된다.

코드 내용을 수정했으면 다시 정지(□)하고 재생(▷)눌러도 되는데
그게 싫으면 실시간으로 다시 컴파일해주는 기능도 있다.

ctrl + F9 누르면 된다.
맥은 command + F9임

* var 키워드

타입적는게 귀찮거나 무슨 타입 적어야할지 모르겠으면 var 이런 키워드를 사용해도 된다.
(Java 10버전 이상부터 사용가능)

var name = "kim";
var age = 20;

타입 자리에 var 적으면 얘가 알아서 타입을 유추해서 적용해준다.
편리하죠?

그래서 var 가끔쓰면 깔끔해보일 수 있어서 쓸지말지는 알아서 판단하면 되는데
실은 그런 코드스타일 같은건 같이 일하는 팀원들이랑 맞추는게 좋다.
참고로 자바 대용품으로 요즘은 Kotlin 언어를 많이 도입하는데 거기선 타입유추기능 쓰는 사람들이 많이 보이는거 같다.

* final 키워드 (상수)
가끔 final을 왼쪽에 붙여서 만들기도 하는데 이러면 변수에 들어있는 값을 나중에 바꿀 수 없다.

final int wifeCount = 0;
wifeCount = 20; //에러남

변수에 들어있는 값을 바꾸려고 하면 에러로 잡아준다.
그래서 바뀌면 큰일나는 값들을 저장할 때 주로 쓰도록 하자.
예를 들어 여러분의 여친숫자, 불알갯수 저장할 땐 final 붙이는게 어떨까요.

* if 조건문

if (조건) {
  조건이 참일 때 실행할 코드~~
}

특정 조건이 맞을 때만 코드를 실행하고 싶으면 if 조건문 안에 넣으면 된다.

int wifeCount = 0;

if (wifeCount == 0) {
  System.out.println("정상");
}

예를 들어 여러분의 여친 수량이 0일 때만 특정 코드를 실행하고 싶은 경우 위처럼 작성하면 된다.
조건자리에는 ==, !=, >, < 같은걸 사용하는 조건식을 주로 입력한다.

* for 반복문

비슷한 코드를 여러번 복붙하고 싶으면 for 꺼내서 쓰면 된다.

for (int i = 0; i < 3; i++) {
  복붙할 코드~~
}

위 코드는
(1) i를 0부터 시작해서
(2) i가 3이 되기 전까지
(3) i에 +1하면서 계속 복붙하라는 소리기 때문에
3번 복붙이 되겠군요. 이거 모르면 자바스크립트 기초강의 들을 시간임

* 함수

긴 코드 덩어리를 자주 재사용하고 싶을 때 함수를 만들어쓰기도 한다.
자바에서도 함수를 만들어서 쓸 수 있는데

public class ShopApplication {

  void 함수(){
    System.out.println("안녕");
  }

  public static void main(String[] args) {
    SpringApplication.run(ShopApplication.class, args);
  }
}

함수 만들고 싶으면 보통 class 안에 만들어서 가져다쓰면 된다.
함수이름(){} 이렇게 함수를 정의해둘 수 있고
함수정의 왼쪽에 return 타입을 넣으면 된다.
그니까 함수 안에 return이 있을 경우 return 하고 있는 자료가 무슨 타입인지 미리 적어놔야한다.
return이 없으면 void 라고 적으면 된다.

하지만 함수를 가져다가 쓰려면 new 키워드로 object를 뽑아서 쓰는게 일반적이라
그건 다음 시간에 class 배우면 알아보도록 하자.

[코딩애플] 쉽게 배우는 Spring Boot & JPA
Part 1
4강 - 자바 기본 문법 2 (class, constructor)

* class가 뭐냐면

자바로 코드짤 때 class를 많이 보게 될텐데 class에 대해 알아보자.
이거 설명할 때 붕어빵 틀이니 상속이니 뭐니 하면서 어렵게 설명하는 사람들이 있는데
그딴거 필요없고 class가 뭐냐면 그냥 변수와 함수 보관하는 통이다.

class Test {
  String name = "kim";
  void hello() { System.out.println("안녕"); }
}

class 만들려면 class 작명 { } 하면 된다.
- 중괄호 안에 변수나 함수를 맘대로 여러개 보관해둘 수 있다.
- 참고로 System.out.println 쓰기 귀찮으면 sout라고 쓰고 엔터누르면 자동완성된다.
- 보관했던 변수와 함수를 자유롭게 가져다쓸 수도 있다.

* class에 있던 변수 함수 사용하려면

class에 보관해뒀던 변수랑 함수를 쓰고 싶으면 class의 복사본부터 만들어야한다.

var test = new Test();

new 클래스() 라고 쓰면 클래스에 있던 변수랑 함수 복사해주세요~ 라는 뜻이다.
그러면 진짜로 클래스에 있던 변수랑 함수를 복사해온 이상한 자료가 그 자리에 남는다.
참고로 변수랑 함수 복사본 담고있는 이상한 자료를 멋있게 object라고 부른다.

var test = new Test();
System.out.println(test.name);

object 안에 저장된 변수랑 함수를 가져다쓰고 싶으면
점찍어서 변수나 함수 꺼내서 쓰면 된다.
그래서 .name 붙이면 이 자리에 아까 Test 클래스에 보관해놨던 kim이라는 변수가 남는 것임
test.hello() 처럼 그 안에 있던 함수도 사용할 수 있다.
진짜 되나 main 함수 안에서 실행해보십쇼

Test test = new Test();

클래스를 복사해올 때 타입을 정확히 넣고 싶으면 뭘넣어야하냐면
타입자리에 클래스명 넣으면 된다.
클래스도 일종의 자료형 역할을 할 수 있어서 그런 것임

정리를 하자면
1. 클래스 쓰면 변수랑 함수들을 보관해둘 수 있음
2. 보관해둔 변수나 함수 쓰려면 new 클래스(); 로 클래스 복사본을 하나 만들어서 점찍어서 꺼내써야함
3. new 키워드로 뽑은 클래스 복사본을 object라고 멋있게 부름

* class 쓰는 이유

근데 여러분들 문법 배우는게 중요한게 아니라
이걸 왜 쓰는지 배워야 나중에 활용을 할 수 있다.

그냥 변수 아무데나 만들어서 쓰면 되는데
왜 귀찮게 클래스 따로 만들어서 변수함수를 보관해두고 복사해서 가져다가 쓰냐고요?
이유는 3개 정도 있다.


1. 자바를 선택한 이상 자바에선 항상 코딩을 클래스부터 써놓고 시작하기 때문에 어쩔 수 없이 강제로 써야함

2. 관련있는 변수, 함수를 한 곳에 보관할 수 있으니까 코드 정리해두기 좋음

3. 중요한 변수, 함수 원본을 안전하게 보관할 수 있음
- 님들 중요한 서류 수정할 때 원본을 직접 수정합니까
원본을 직접 수정하고 그러면 좀 위험할 수 있어서 보통은 복사한 다음에 그걸 가져다가 쓰는게 안전하다.
class도 마찬가지로 변수, 함수 원본을 보관해두고
이걸 new 키워드로 복사해서 쓰면 원본 데이터를 안전하게 그대로 지킬 수 있으니까 그래서 쓰는 것이다.

그래서 이런 장점들 때문에 class를 쓰는 개짓거리를 하는데
실은 장점들이 몇개 더 있다. 그건 나중에 코드짤 때 체감해보자.

(참고1)
클래스안에는 복사안되는 변수도 만들 수 있고
복사안해도 쓸 수 있는 변수도 만들 수 있고
그럴 수도 있다.
static private 같은 여러 키워드들 쓰면 되는건데 나중에 알아보자.

(참고2)
object를 다른 말로 인스턴스라고 부르기도한다.
클래스 안에 있는 변수는 field / attribute 라고 부르기도 하고
클래스 안에 있는 함수는 method라고 부르기도 한다.
있어보이는 척 할 때 써보도록 하자.

* constructor 문법

이번엔 constructor 문법을 배워볼건데 그냥 배우면 재미가 없으니까 상황을 한번 가정해보자.
다들 친구 한 명은 있을텐데 친구없으면 이번 기회에 가짜로 하나 만드시고요

Q. 내 친구 한 명의 이름과 나이를 변수로 저장해놓고 싶으면 어떻게 하죠?
친구의 이름, 나이 저장할 변수 2개를 만들면 될 것 같은데
클래스 배운 사람들이니까 클래스 하나 만들어서 거기 안에 넣어보도록 하자.

class Friend {
  String name = "kim";
  int age = 20;
}

Friend라고 클래스 하나 만들어서 이름, 나이를 보관해봤다.
그럼 앞으로 이 친구의 나이가 필요하면 어떻게 합니까
new Friend()로 object 뽑아서 쓰면 되겠네요. 심심하면 뽑아서 출력해보자.

Q. 근데 이번엔 친구가 한 명 더 생겼습니다.
그 친구는 나이는 똑같은데 이름이 "park"이다.
그 친구도 클래스 하나 만들어서 이름, 나이 저장해두고 싶으면 어떻게 하죠?

class Friend1 {
  String name = "park";
  int age = 20;
}

클래스 하나 더 만들어서 이러면 된다.

Q. 근데 이번에 또 다른 이름의 친구가 또 생기면 어쩔 것임?
- 실은 비슷한 클래스는 굳이 여러개 만들 필요가 없다.
클래스에서 쓸 수 있는 constructor와 파라미터문법을 쓰면
object 뽑을 때 마다 매번 다른 변수값을 가지도록 클래스를 만들 수 있다.

class Friend {
  String name = "kim";
  int age = 20;
  Friend() {
    this.name = "어쩌구";
  }
}

여기 class 안에다가 클래스랑 똑같은 이름의 함수( ){ }를 하나 만들어보자.
그러면 이건 슈퍼 울트라 스페셜한 함수가 되는데
이 함수는 object를 하나 만들 때 자동으로 실행된다.

이 스페셜함수안에는 신기한 this라는 키워드도 쓸 수 있다.
this는 새로 생성될 object를 뜻한다.
this.name = “어쩌구”
그래서 this를 활용하면 이런 식으로 name 변수의 초깃값을 맘대로 설정해줄 수도 있다.
위 코드는 그래서 새로 생성될 object의 name 변수에 "어쩌구" 넣으라는 소리이다.

Q. 뭔가 문법을 배웠으면 이걸 왜 쓰는지 생각해봐야 나중에 활용이 가능하다. 이거 왜 쓰는 것임?
- 이거 스페셜한 함수랑 this문법을 잘 쓰면
object를 뽑을 때 마다 매번 다른 값을 변수에 집어넣어서 뽑을 수도 있다.
그니까 뽑을 때 마다 name변수에 "kim"도 넣고 "park"도 자유롭게 넣어서 뽑을 수 있음

class Friend {
  String name = "kim";
  int age = 20;
  Friend(String 이름){
    this.name = 이름;
  }
}

어떻게 하냐면 매번 가변적으로 설정할 부분에다가 파라미터를 추가해보면 된다.
저는 이름이라는 파라미터를 뚫어봤다.
파라미터도 일종의 변수라서 왼쪽에 타입도 집어넣어야함

var friend1 = new Friend("kim");
var friend2 = new Friend("park");

이런 짓을 해두면 이제 new Friend() 으로 object 뽑을 때
이 때 소괄호 안에 원하는 값("kim", "park")을 집어넣어서 뽑을 수 있다.
예를 들어서 “park” 이렇게 집어넣어볼 수 있는것이다.
그럼 파라미터자리에 뿅 박혀서 뽑힙니다.

Q. 그래서 위에 있는 변수 2개에 있던 name을 출력해봅시다. 뭐나오게요
System.out.println(friend1.name);
System.out.println(friend2.name);

Q. 그럼 name이 "lee"인 친구를 한명 만들고 싶으면 어떻게 코드짜야합니까
var friend3 = new Friend("lee");
System.out.println(friend3.name);

(참고1)
this는 생략해도 된다.
this없어도 그냥 this 생략되었겠거니 하면서 컴퓨터가 알아서 채워주고요

(참고2)
파라미터는 원하는 만큼 많이 만들 수 있다.

(참고3)
슈퍼 울트라 스페셜 함수를 개발자 말로 constructor라고 부른다.

* 객체지향 프로그래밍

class와 object를 많이 활용해서 개짓거리 하는걸 객체지향 프로그래밍이라고 부르기도 하는데
그래서 자바로 코드짠다고해서 객체지향에 대해서 많은걸 배워오려고 하는 분들이 있는데
객체지향 문법은 길고 복잡한 코드 정리도구, 관리도구일 뿐이다.
초보 때는 관리할 코드도 없는데 관리법부터 배우면서 시간낭비할 필요가 없다.

(1) class 만들고
(2) object 뽑는거
(3) constructor 쓰는거
이 정도만 알고 있으면 개발하는데 전혀 문제없다.
스프링 부트는 특히나 코드 창조할 일 보다 코드 배치하는 일이 더 많아서 이런거 몰라도 코드짤 수 있는 정도이다.

* 배운거 정리

1. 클래스는 변수 함수 보관함임

2. 클래스에 있던 변수함수를 사용하고 싶으면 new 클래스()로 object를 뽑으면 된다.
그럼 클래스 안에 들어있던 변수 함수가 object로 복사된다.

3. object 뽑을 때마다 각각 다른 변수값을 부여하고 싶으면 constructor를 만들면 된다.
클래스이름( ){ } 으로 함수만들면 그게 constructor임
그 안에 있는 코드는 object 뽑을 때 자동실행되므로 this 같은거 써서 변수의 초깃값을 맘대로 설정할 수도 있다.
심지어 함수 파라미터 문법도 사용가능

4. field, attribute, method, instance라는 용어 배움

1~2번은 자주 사용할 것이기 때문에 죽고싶지 않으면 이 정도는 외워두자.

[코딩애플] 쉽게 배우는 Spring Boot & JPA
Part 1
5강 - 웹서버와 웹페이지 만들기 (Controller)

* 서버가 뭐냐면

서버가 뭐냐면 그냥 유저가 데이터 요청하면 그 데이터 보내주는 따까리 같은 프로그램일 뿐이다.
이거 해줘 그러면 진짜 그거 해주는 프로그램이 서버일 뿐임

Q. 유튜브 서버가 뭐임?
- 누가 동영상달라고 요청하면 동영상 보내주는 프로그램일 뿐이다.

Q. 네이버 웹툰 서버가 뭐임?
- 누가 웹툰달라고 요청하면 웹툰보내주는 프로그램일 뿐이다.

Q. 웹서버는 뭐임?
- 그냥 누가 웹페이지 달라고 하면 웹페이지 보내주는 서버일 뿐이다.

그래서 서버개발이 어려운게 아니고
누가 메인페이지달라고 하면 메인페이지 보내주고
로그인페이지 달라고 하면 로그인페이지 보내주고
그런 식으로 코드짜면 웹서버개발 끝이다.
실은 글 저장 수정 삭제 이런것도 처리해주는 기능도 있을 수 있는데 이런 것들은 나중에 해보고
이번 시간엔 간단하게 웹페이지 보내주는 서버와 그 기능부터 만들어보자.

* 서버기능 만들려면 Controller

일단 코드짜게 .java 파일을 아무데나 새로 만들어보자.
BasicController.java 라고 맘대로 작명해봤다.

package com.apple.shop;
import org.springframework.stereotype.Controller;

@Controller
public class BasicController {

}

원래 .java 파일안엔 보통 파일명과 똑같은 클래스부터 넣고 시작해야하는데
클래스는 에디터에서 알아서 생성해준다.
여기다가 이제 서버기능만들면 된다.
서버기능을 만들고 싶으면 아무 클래스에 @Controller 써놓고 시작하면 된다.

package com.apple.shop;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class BasicController {
    @GetMapping("/경로")
    @ReponseBody
    String hello(){
        return "유저에게 보내줄데이터";
    }
}


@GetMapping() 안에 페이지 경로 마음대로 적고
@ResponseBody 쓰고
return 오른쪽에 유저에게 보내줄 데이터를 적으면
이제 /경로로 방문했을 때 그 데이터를 보내준다.
참고로 골뱅이(@) 붙은걸 작성할 땐 엔터키 잘 쳐서 상단에서 import 해와야 동작한다.

Q. 왜 그래야함?
- Spring boot 프레임워크 사용법일 뿐이라 이렇게 쓸 뿐이다.
골뱅이(@) 잘 넣으면 알아서 서버기능이 되도록 만들어놓은 프레임워크임
심지어 골뱅이(@)만 잘 붙이면 main 함수에 안넣어도 알아서 제때 잘 실행해준다.

package com.apple.shop;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class BasicController {
    @GetMapping("/")
    @ResponseBody
    String hello(){
        return "안녕하쇼";
    }
}

그래서 저는 누가 / 메인페이지(@GetMapping("/"))로 접속했을 때
"안녕하쇼"라고 유저에게 메세지를 보내는 기능을 만들어봤다.
그래서 프로젝트 실행해본 다음에 브라우저켜서 localhost:8080으로 접속해보자.
이게 여러분 / 메인페이지(@GetMapping("/"))인데 접속해보면 "안녕하쇼"가 잘 나오는군요.

* 다른 페이지도 만들어보자

다른 웹사이트들 보면 메인페이지 말고 다른 페이지도 많지 않습니까 예를 들면
comic.naver.com/webtoon 으로 접속하면 요일웹툰 볼 수 있는 페이지를 보내주고
comic.naver.com/challenge 로 접속하면 도전만화 페이지 보내주고요
그런 식으로 URL을 다르게 입력하면 다른 페이지를 각각 보여준다.
우리도 이런 식으로 다른페이지하나 만들어보자.
예를 들면 누가 /about으로 접속하면 이 사이트 소개글같은거 보내주고 싶으면 어떻게해요?

package com.apple.shop;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class BasicController {
    @GetMapping("/")
    @ResponseBody
    String hello(){
        return "안녕하쇼";
    }

    @GetMapping("/about")
    @ResponseBody
    String about_hello(){
        return "피싱사이트에요";
    }
}

새로운 서버 기능이 하나 필요할 때 마다 @GetMapping() 덩어리 복붙해서 쓰면 된다.
    @GetMapping("/경로")
    @ReponseBody
    String hello(){
        return "유저에게 보내줄데이터";
    }

Q. 누가 /mypage 이렇게 접속하면 "마이페이지입니다" 이런 문자를 보내주고 싶으면 어떻게 하죠?

package com.apple.shop;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class BasicController {
    @GetMapping("/")
    @ResponseBody
    String hello(){
        return "안녕하쇼";
    }

    @GetMapping("/about")
    @ResponseBody
    String about_hello(){
        return "피싱사이트에요";
    }

    @GetMapping("/mypage")
    @ResponseBody
    String mypage_hello(){
        return "마이페이지입니다";
    }
}

* html 보내기

package com.apple.shop;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class BasicController {

    @GetMapping("/")
    @ResponseBody
    String hello(){
        return "<h4>안녕하쇼</h4>";
    }

//    @GetMapping("/")
//    @ResponseBody
//    String hello(){
//        return "안녕하쇼";
//    }

    @GetMapping("/about")
    @ResponseBody
    String about_hello(){
        return "피싱사이트에요";
    }

    @GetMapping("/mypage")
    @ResponseBody
    String mypage_hello(){
        return "마이페이지입니다";
    }
}

간단한 문자 말고 html을 보내고 싶으면 return 오른쪽에 html 적어도 된다.
근데 보통은 보내고 싶은 html이 매우 긴 경우엔
별도의 파일 만들어서 html 집어넣어두고 그 파일을 전송할 수도 있다.

(resources/static/index.html)

<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    <h4>메인페이지인데요</h4>
</body>
</html>

html css js 파일들은 resources 폴더안의 static 폴더에 보관하면 된다.
index.html 파일을 만들어서 위처럼 채워봤는데 ! 느낌표 입력하고 탭키 누르면 기본 양식이 자동완성된다.
.html 파일은 그냥 html 담는 파일이고 html은 웹페이지 만들 때 쓰는 언어임

package com.apple.shop;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class BasicController {

    @GetMapping("/")
    String hello(){
        return "index.html";
    }

//    @GetMapping("/")
//    @ResponseBody
//    String hello(){
//        return "<h4>안녕하쇼</h4>";
//    }
}

유저에게 html 파일을 보내주고 싶으면 @ResponseBody 빼고 return 오른쪽에 "html파일경로" 적으면 된다.
@ResponseBody 를 쓰면 return 오른쪽에 있는걸 (문자열, html 태그 등등...) 유저에게 보내라는 뜻이고 (return "<h4>안녕하쇼</h4>";)
@ResponseBody 를 안쓰면 return 오른쪽에 있는 경로의 파일을 전송하라는 뜻이 됩니다. (return "index.html";)

파일경로는 static 폴더가 기본이다.
(예1) index.html - 기본 상위 폴더 경로가 static 폴더임
(예1) test/test.html - 기본 상위 폴더 경로가 static 폴더 하위에 속한 test 폴더임

오늘의 결론 :
웹페이지 하나 보내주는 기능 만들고 싶으면
@Controller 클래스 안에 함수하나 만들고 이거저거 채우면 만들 수 있다.

오늘의 숙제 :
누가 /date 로 접속하면 현재 날짜와 시간을 보내주는 기능을 만들어봅시다.
http://localhost:8080/date로 접속시 날짜와 시간이 대충 아무렇게나 보이면 성공이다.
굳이 HTML 말고 날짜 데이터만 보내줘도 된다.

Q. 자바에서 오늘 날짜는 어떻게 알 수 있는데요?
안배운건 검색해봐야지 생각한다고 나오는게 아님

package com.apple.shop;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.text.SimpleDateFormat;
import java.util.Date;

@Controller
public class BasicController {

    @GetMapping("/")
    String hello(){
        return "index.html";
    }

    @GetMapping("/about")
    @ResponseBody
    String about_hello(){
        return "피싱사이트에요";
    }

    @GetMapping("/mypage")
    @ResponseBody
    String mypage_hello(){
        return "마이페이지입니다";
    }

    @GetMapping("/date")
    @ResponseBody
    String date(){
        // 현재 날짜와 시간 구하기
//       return LocalDateTime.now().toString();
        return ZonedDateTime.now().toString();

        // TODO: 현재 날짜와 시간 구하기 (2025.07.15 minjae)
        // 참고 URL - https://greenyellow-s.tistory.com/30
//        Date date = new Date();
//        SimpleDateFormat sdf = new SimpleDateFormat("y년 MM월 dd일 H시 m분 s초");
//        return sdf.format(date);
    }
}

LocalDateTime.now().toString() 아니면 ZonedDateTime.now().toString() 이런거 쓰면
현재 시간을 문자형태로 출력해볼 수 있다고 하는군요.
그래서 /date 접속시 보내라고 해봤더니 진짜 /date 접속시 보임

[코딩애플] 쉽게 배우는 Spring Boot & JPA
Part 1
6강 - HTTP 요청 & REST API 개념정리

코드 배운대로 똑같이 싸지르는건 AI가 더 잘하기 때문에
큰그림이랑 원리같은걸 배워가는게 되게 중요하다.
그걸 알아야 AI에게 코딩을 시키든 말든 할거아닙니까

유저 요청 (웹페이지 내놔)-> 웹서버
웹서버 (웹페이지 전송) -> 유저

▲ 지금 하는 짓거리를 그림으로 그려보면 이렇게 생겼다.
유저가 웹브라우저를 써서 웹서버에게 이거저거 달라고 요청을 날려서 웹페이지나 데이터를 받아보고 있다.

근데 요청할 때 지켜야될 예절이 있는거 아십니까
아무렇게나 싸가지없이 웹서버에게 요청을 날리면
웹서버는 그 요청을 안들어준다.
1. method 2. URL을 정확히 적어서 예절바르게 요청을 보내야 웹서버가 답례로 데이터를 보내준다.

URL은 알아서 잘 기입하면 되고
method는 이런 것들이 있는데 이 중에서 마음에 드는거 하나 고르면 된다.
GET은 웹서버에게 데이터를 달라고할 때
POST는 웹서버에게 데이터를 보내고싶을 때
UPDATE, PUT은 웹서버에게 DB 수정요청같은걸 할 때
DELETE는 웹서버에게 DB 삭제요청같은걸 할 때
주로 고르면 된다.
그래야 웹서버는 요청을 알아듣고 이제 유저에게 데이터나 웹페이지를 응답해줄 수 있다.

@GetMapping("/경로")
@ReponseBody
String hello(){
   return "유저에게 보내줄데이터";
}

자세히 보면 웹서버기능 만들 때 여러분들이 맘대로 URL과 method를 정해놓을 수 있다.
URL은 /경로 형태로 잘 입력할 수 있고
@GetMapping 이라고 쓰면 서버에서 GET요청을 수신하겠다는 뜻이다.
Get이라고 적힌 부분은 Post, Put, Delete 이렇게 맘대로 바꿔서 코드짜놓을 수 있다.
(예) @PostMapping, @PutMapping, @DeleteMapping,

그래서 웹서버에서 맘대로 URL과 method를 정해둘 수 있는데
유저는 거기 맞춰서 요청날리면 웹서버기능을 이용가능하다.

* 요청날리는 방법

지금 요청요청 거리고 있는데 이걸 정확한 말로 HTTP 요청이라고 한다.
근데 실제로 유저가 HTTP 요청을 어떻게 날리냐고요?

GET요청하는건 쉬운데
웹브라우저 주소창에다가 URL을 때려박으면 그 URL로 GET요청을 날려준다.
엔터치면 요청이 날라가고 웹서버가 보낸 데이터를 브라우저에서 볼 수 있다.
<form> 태그나 ajax 기능을 쓰면 POST, PUT, DELETE 요청도 가능한데 나중에 알아보자..

* 웹서버에 없는 URL과 method로 요청날리면?

근데 웹서버에 기재되지 않은 URL과 method로 요청날리면 어떻게 될까요?
URL 아무렇게나 /aaaa 이렇게 입력해서 접속해보면 에러페이지가 나온다.
왜냐면 /aaaa 라는 URL로 오는 요청을 처리하는 기능은 웹서버에 안만들어놨으니까요.
그래서 유저는 당연히 웹서버에 미리 정의해놓은 URL과 method로 요청해야한다.

Q. 유저가 웹서버파일을 볼 수도 있는것도 아닌데 유저는 어떤 URL과 method로 요청해야하는지 어떻게 알죠?
그건 여러분이 나중에 웹페이지 안에 숨겨놓으면 된다.
버튼누르면 특정 URL과 method로 요청되게 만들고
사진누르면 특정 URL과 method로 요청되게 만들고
그러면 된다.
웹페이지는 그래서 실은 웹서버기능을 진열해놓은 진열장같은 역할이다.

그리고 용어 하나 배우자면
URL과 method 기재해서 작성해놓은 웹서버기능 하나를 API라고 부른다.
API는 그냥 "프로그램의 사용법"이라는 뜻인데
우리는 웹서버 프로그램을 만들고 있고 그거 하나하나가 "웹서버 사용법" 아닙니까
그래서 이걸 웹서버 API라고 부른다.

@Controller
public class BasicController {

  @GetMapping("/경로")
  @ReponseBody
  String hello(){
    return "유저에게 보내줄데이터";
  }

}

그래서 @GetMapping 부터 작성한거 하나를 API라고 부르면 된다.
그리고 API들을 담고있는 클래스는 보통 Controller라고 부른다.
유저의 요청을 여기저기 API로 안내하는 역할이라 '컨트롤러'라고 부름
그리고 아무 클래스에나 @Controller 넣어두면 해당 클래스 몸체 안에 API를 만들 수 있다는것도 잘 기억해두면 된다.

* REST API

그리고 개발하다보면 맨날 REST API 아니면 RESTful API 이런 단어들도 가끔 들린다.
자주 들리니까 이것도 뭔지 알아보도록 하자.
REST는 어떤 배나온 잡배 아저씨가 졸업논문으로 쓴 '좋은 API 만드는 법'을 의미한다.
6가지 원칙을 제안했는데

1. Uniform Interface
- 비슷한 기능을 하는 API들은 URL과 method가 유사성, 일관성이 있는게 좋다.
- 간결하고 예측가능하게 URL과 method를 만드는게 좋다.

2. Client-server 역할 구분
유저에게 웹서버역할을 맡기거나 DB를 직접 입출력하게 시키면 안좋다.

3. Stateless
셋째로 요청들은 서로 의존성이 있으면 안되고 각각 독립적으로 처리되어야한다.

4. Cacheable
웹서버가 보내는 자료들은 캐싱이 가능해야한다.
그러니까 자주 받는 자료들은 웹브라우저에서 하드에 저장해놓고
웹서버에 요청을 날리는게 아니라 하드에서 뽑아쓰는걸 캐싱이라고 한다.

5. Layered System
웹서버기능을 만들 때 레이어를 걸쳐서 코드가 실행되도록 만들어도 된다고 한다.
(요청하나는 최종 응답전까지 여러 단계를 거쳐도 됩니다.)

6. Code on demand
웹서버는 유저에게 실행가능한 코드를 보낼 수 있다.

그래서 이런 원칙들을 잘 지키면서 웹서버 API를 만들면 그걸 REST아니면 RESTful API 라고 부른다.
그런데 이상한 아저씨 한명의 졸업논문일 뿐이라 근본은 별로 없는 개념이고
저걸 정확히 지키는 웹서버도 거의 없고 추상적인 포인트도 많아서 권장사항으로만 참고만 해두면 된다.

실은 요즘 와전된 다른 뜻도 있는데
원래 웹서버에서 .html 웹페이지를 보내는게 아니라 JSON 데이터만 달랑 보낼 수도 있다.
그니까 자바로 치면 Map, ArrayList 자료
자바스크립트로 치면 object랑 array 자료만 서버에서 보내주는 것이다.
그렇게 데이터만 보내는 API들을 REST API라고 부르는 경우도 있다.


Q. 웹서버에서 html이 아니라 데이터만 보내면 쓸데없는거 아님?
그럴 수 있다 웹서버에서 { product : 바지, price : 7000 } 이런 데이터만 보내봤자 뭐하겠습니까 html로 보여줘야 쓸모있지않겠습니까
근데 웹서버에서 데이터만 받아온 후에 그걸 가지고 html을 웹브라우저에서 자바스크립트로 생성하는 방법도 있다.
클라이언트 사이드 렌더링이라고 부르는데 그런 식으로도 개발이 가능해서 그렇다.
React, Vue 이런 라이브러리가 그걸 쉽게 도와주는 라이브러리이다.

* 예쁜 URL 만들기

URL 이름지을 때도 몇가지 원칙들을 지키면 이해가 쉽고 깔끔한 URL을 만들 수 있는데

- 단어들을 동사보다는 명사 위주로 구성함
- 띄어쓰기는 언더바_대신 대시-기호-사용
- 파일 확장자 쓰지 말기 (.html 이런거)
- 하위항목을 표현하고 싶으면 / 기호를 사용하면 좋다. (하위폴더같은 느낌)

예시를 한번 보도록 하자.
facebook.com/bbc/photos
instagram.com/explore/tags/food
▲ 이 URL들은 매우 잘 만든 것 같지 않습니까.

왜냐면 facebook.com/bbc/photos 여기로 GET요청하면 딱봐도 보내줄 데이터가 뭔지 느낌이 오지 않습니까
딱봐도 facebook 계정 중에 bbc 계정의 사진첩을 보여줄 것 같다.
실제로 들어가보자.

instagram.com/explore/tags/food 이건 무슨 데이터를 보내줄 것 같습니까
인스타그램 탐색페이지를 보여주는데 해시태그 #food 달린 사진만 가져다줄 것 같죠?
한 눈에 딱 보이고 깔끔하군요.

그래서 이런 식으로 깔끔하게 만드는게 좋으니 앞으로 웹서버 API에서 URL 작명할 때 한번 쯤 생각해보자.

[코딩애플] 쉽게 배우는 Spring Boot & JPA
Part 1
7강 - 상품목록 페이지 만들기 (Thymeleaf)

쇼핑몰을 만든다고 했는데
가장 중요한 '상품목록 보여주는 페이지'부터 하나 만들어보자.
누가 /list로 접속하면 list.html 같은 페이지를 하나 전송해주면 될 것 같군요.
그 안엔 상품들을 집어넣고요.

* list.html 보내주는 기능을 만들어보자

(ItemController.java)

package com.apple.shop;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller   // @Controller 사용하면 springframework가 알아서 아래 코드(public class ItemController { ... }) 가져와서 ShopApplication 클래스 main 함수에 집어 넣어서 아래 웹서버 코드 실행
public class ItemController {
    // 여기서 웹서버기능 제작가능

    // 웹서버 API
    @GetMapping("/list")
    String list(){
        return "list.html";
    }

}

그래서 파일(ItemController.java) 하나 새로 만들어서 웹서버 API를 만들어봤다.
- 상품과 관련된 웹서버 API들을 한 곳에 모아놓으려고 새로 파일(ItemController.java) 만들어봤다.
- 아무 클래스(예 - ItemController)에 @Controller 붙이면 웹서버 API들을 해당 클래스(예 - ItemController) 안에 만들 수 있다.
- 원래 파일(ItemController.java) 상단에 package 파일경로; 라고 적어줘야 다른 파일에서도 해당 파일(ItemController.java)에 있는 코드를 사용가능하다.

(list.html)

<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>

  <div>
    <img>
    <h4>바지</h4>
    <p>7억</p>
  </div>
  <div>
    <img>
    <h4>셔츠</h4>
    <p>8억</p>
  </div>

</body>
</html>

list.html 파일도 만들어서 상품들을 채워봤다.
그럼 진짜로 /list 방문시 html 보이나 테스트해보자.

* 매번 다른 상품 보내줘야하는거 아님?

근데 이러면 접속할 때 마다 항상 같은 내용의 html 페이지만 보내주는거 아닙니까?
쇼핑몰은 맨날 다른 상품명이랑 가격을 보내야하는거 아님?
그러고 싶으면 템플릿 엔진이라는걸 사용한다.

템플릿 엔진은 웹서버의 데이터를 html에 집어넣어주는걸 도와주는 외부 라이브러리이다.
여러가지 템플릿 엔진들이 있는데 우리는 Thymeleaf 템플릿 엔진을 사용해보도록 하자.

(build.gradle)
// 설치할 외부 라이브러리들
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

위처럼 build.gradle 파일에 속한 항목 "dependencies"에 차이점(implementation 'org.springframework.boot:spring-boot-starter-thymeleaf')만 잘 붙여넣고
Load Gradle Changes 버튼누르면 외부 라이브러리 설치가 가능하다.
외부 라이브러리 설치했으면 웹서버 중지했다가 재시작해야 잘 적용된다.

* build.gradle 파일에서 외부 라이브러리 설치 방법 (Load Gradle Changes 버튼 클릭)
참고 URL - https://dawitblog.tistory.com/30

이제 html 파일을 templates 폴더(폴더 경로 - "D:\minjae\JavaSpringBootStudy\shop\src\main\resources\templates") 안에 만들어야
Thymeleaf 문법(Thymeleaf 템플릿 엔진 외부 라이브러리 설치해야 사용 가능한 문법.)으로 html을 만들 수 있다.
Thymeleaf 써도 기존 html 파일이랑 똑같이 작성하고 사용할 수 있는데
html 곳곳에 Thymeleaf 문법(Thymeleaf 템플릿 엔진 외부 라이브러리 설치해야 사용 가능한 문법.)으로 웹서버데이터를 집어넣을 수 있다는게 차이점이다.
(Node.js 웹서버의 ejs 문법과 비슷한 기능이다.)

* Thymeleaf로 웹서버데이터 html에 박아서 보내주려면

이제 웹서버에서 특정 html 파일에 웹서버의 데이터를 집어넣을 수 있는데 어떻게 하냐면
1. 웹서버 API 함수의 파라미터에 Model model 넣고
2. 웹서버 API안에서 model.addAttribute("작명", 전송할데이터); 코드 추가
3. html 파일 안에서 구현한 html 태그에 th:text="${작명}" 코드 추가
이런거 차례로 쓰면 된다.

package com.apple.shop;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller   // @Controller 사용하면 springframework가 알아서 아래 코드(public class ItemController { ... }) 가져와서 ShopApplication 클래스 main 함수에 집어 넣어서 아래 웹서버 코드 실행
public class ItemController {
    // 여기서 웹서버기능 제작가능

    // 웹서버 API
    @GetMapping("/list")
    String list(Model model) {
        model.addAttribute("name", "홍길동");
        return "list.html";
    }

}

1. 웹서버 API 함수의 파라미터에 Model model 넣고
2. model.addAttribute("작명", 전송할데이터); 쓰면 된다.
그럼 앞으로 list.html에서 name이라고 사용하면 "홍길동"이 출력된다.

(list.html)

<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>

  <div>
    <img>
<!--    <h4>바지</h4>  -->
    <h4 th:text="${name}">바지</h4>
    <p>7억</p>
  </div>
  <div>
    <img>
    <h4>셔츠</h4>
    <p>8억</p>
  </div>

</body>
</html>

3. html 태그(<h4 th:text="${name}">바지</h4>)에 th:text="${작명}"(예 - th:text="${name}") 이라고 써야 웹서버에서 보낸 데이터 출력이 가능하다.
그래서 위 html을 유저에게 전송할 땐 앞으로 <h4>태그에 "홍길동"이 박혀서 전송된다.
Thymeleaf 문법(Thymeleaf 템플릿 엔진 외부 라이브러리 설치해야 사용 가능한 문법.)을 사용하고 싶으면
templates 폴더(폴더 경로 - "D:\minjae\JavaSpringBootStudy\shop\src\main\resources\templates")로 html 파일을 옮겨야 잘 동작한다.
/list 페이지 방문해서 진짜인지 실험해봅시다.

지금은 가짜 임시 데이터들을 html에 박아서 보여주고 있는데
다음 시간부터 데이터베이스를 하나 만들어서 거기 있던 데이터를 뽑아서 보내주는 방법을 알아보자.

[코딩애플] 쉽게 배우는 Spring Boot & JPA
Part 1
8강 - MySQL Database 호스팅 받기

실제 서비스를 운영하려면
고객데이터 상품데이터 주문데이터 이런걸 다 저장해둬야하지 않겠습니까
엑셀이나 메모장에 저장해둬도 되긴 하는데 보통은 데이터베이스를 사용한다.
그래야 대량의 데이터를 보관해둘 수도 있고 빠르게 원하는 데이터만 입출력할 수 있으니까요.

* 관계형 데이터베이스

데이터베이스는 여러 종류가 있다.
key : value 형태로 단순하게 저장하는 것도 있고
key : value를 여러개 묶어서 document 형태로 저장하는 데이터베이스도 있고
그래프나 벡터형식을 저장할 수 있는 데이터베이스도 있다.
근데 우리는 관계형 데이터베이스를 써볼것이다.
역사와 전통이 있고 일반적으로 많이 쓰니까요.

|  id  |  price  |  title  |
|   1  |  7,000  |   셔츠   |
|   2  |  5,000  |   바지   |
|   3  |  6,000  |   자켓   |

(1) 관계형 데이터베이스는 표 형식으로 데이터를 저장해둔다.
맨 윗줄에 어떤 데이터를 저장할지 미리 기록(Column)한 다음에 하나의 행(raw)마다 데이터를 기록한다.
엑셀이랑 똑같음

(2) 데이터 입출력할 때 보통 SQL 이라는 언어를 써야 입출력이 가능하다.
하지만 우리는 ORM이라고 부르는 라이브러리를 쓸건데 그거 쓰면 자바 문법으로 데이터 입출력이 가능해서 SQL부터 익힐 필요는 없다.

(3) 여러 DBMS 중에 하나 골라서 설치하면 데이터베이스 이용이 가능하다.
한국에선 MySQL, Oracle, PostgreSQL 이런걸 자주 사용한다.
서로 저장할 수 있는 데이터의 형식, 약간의 SQL 문법이 다를 수 있는데
근데 크게 다르진 않기 때문에 아무거나 써도 별로 상관없다.
우린 MySQL을 써보도록 하자.

* 데이터베이스 호스팅받기

여러분 하드디스크에 직접 MySQL 설치해서 쓰거나
AWS 같은 클라우드 서비스가서 MySQL 호스팅을 받거나
둘 중 하나 고르면 된다.
근데 실제 서비스 운영할거면 당연히 클라우드 서비스에서 호스팅 받는게 안정적이고 좋을 것이니 그러도록 하자.

AWS / Google Cloud / 마이크로소프트 Azure 이런것들이 있다.
대부분 카드등록하면 1년 무료 사용권을 주는데
AWS는 편하게 AWS RDS에서 데이터베이스호스팅 받으려면 요즘 IPv4 이용 명목으로 월 3달러 추가요금이 발생해서
우리는 Azure 써볼것이니 여기 들어가서 가입 후 카드등록까지 해오자.

(참고) Azure는 30일 경과 후엔 직접 종량제 요금제로 업그레이드버튼 눌러야 남은 11개월동안 무료로 이용이 가능하다.

* Supabase

Supabase 들어가면 카드등록 없이 PostgreSQL 무료 호스팅을 받을 수 있다.
500MB까지 저장이 가능한데 DB입출력이 7일동안 없으면 일시정지되는게 귀찮다.
어짜피 ORM 라이브러리 쓸 것이라 PostgreSQL, MySQL 아무거나 써도 문법이 달라지지 않아서 상관 없다.
DB만들고나서 설정 들어가서
DB접속용URL, DB접속용아이디, DB접속용비번만 잘 가져와두면 된다.

* Azure에서 MySQL 호스팅받으려면

1. Azure 검색해서 들어가서 가입하고 카드등록까지 마친다.
Azure 웹사이트 URL 주소는 portal.azure.com인데 마이크로소프트 계정("minjaejeon0827@gmail.com")으로 로그인해야한다.

2. portal.azure.com 상단 검색창에서 'Azure Database for MySQL 유동서버' 검색 후 진입
그럼 만들기 버튼이 어딘가 있을텐데 눌러서 만들어보자.

3. 알아서 잘 채워준다.
- 구독/리소스 그룹은 비용관리용 폴더같은 것인데 대충 새로 만들어주자.
- 서버이름은 유니크하게 잘 작명하고 한국에서 서비스할거면 Korea 선택하자.

4. 컴퓨팅/스토리지 선택하는 곳이 있을텐데
- Compute는 무료라고 써있는거 잘 선택하시고
- IOPS는 '미리 프로비전된 IOPS' + 최소사양을 선택해야 아마 추가요금이 없습니다.
360 저건 입출력을 1초에 360회로 제한한다는 뜻이라 나중에 유저 많아지면 '자동확장 IOPS' 이런거 쓰거나 조절해보자.

참고사항 - 고가용성은 나중에 DB 안정성 높일 때 필요함.

5. DB 접속용 아이디/비번도 만들어주자.
털리면 코딩인생 끝나는 것임

DB 접속용
Host URL 주소: codingapplemysql0827.mysql.database.azure.com
아이디: codingapple
비번: qwer1234!

6. 다음 탭 눌러보면 접속가능한 IP주소도 설정할 수 있다.
- 안전하게 하려면 Azure 서버컴퓨터만 접속가능하게 '프라이빗 액세스' 이런걸 고르면 되겠지만
우리는 내 컴퓨터에서 접속해야하니까 '공용 액세스'를 고르자.
- 근데 다행히 특정 IP주소만 접속가능하게 보안장치를 하나 만들 수 있는데 여러분 IP주소 기입하면 된다.
어짜피 연습용이라 스타벅스에서 코딩할거면 모든 IP주소를 위 사진처럼 추가한다.

그럼 나머지는 건드릴거 없을거고 데이터베이스 생성하면 된다. 대충 5~10분 걸림

7. 생성되었으면 마지막으로 설정할게 하나 있음
데이터베이스 생성되었으면 들어가보면 '서버 매개 변수' 설정할 수 있는 부분이 어딘가 있을텐데
들어가서 require_secure_transport를 OFF로 설정하자.
어짜피 연습용인데 SSL 인증같은걸 잠깐 끄는 식이다.

Database 생성 끝

* AWS는요

AWS를 좋아한다면 AWS RDS 이런거 써도 되는데
올해부터 RDS 사용시 퍼블릭 액세스를 "예"로 설정하면 IPv4 사용요금 명목으로 월 3달러 정도 청구되는 것으로 바뀌어서
요금을 피하고 싶다면 AWS EC2 들어가서 인스턴스 하나 만들어서 같은 VPC그룹에 집어넣고 SSH 키파일도 가져온 다음에
SSH 터널링으로 내 컴퓨터 -> EC2 -> RDS DB 이런 식으로 접속하거나

아니면 RDS말고 EC2에 직접 설치해서 쓰면
1년무료 free tier 사용중일 경우 IPv4 요금이 아마도 청구되지 않을 것이기 때문에
EC2에서 컴퓨터 하나 빌려서 직접 MySQL 설치해서 써야합니다.
하지만 EC2에 설치하면 백업이나 모니터링 같은 것도 직접 해야하기 때문에 귀찮다.

* DB 접속은

DB 접속해서 데이터를 미리보고 싶으면
DBeaver같은 프로그램 설치하는게 가장 쉽고 빠르고 좋다.
DBeaver 검색해서 설치하면 아마 상단에 데이터베이스 연결 버튼이 어딘가에 있을텐데 눌러보자.

DBeaver 설치 방법
유튜브 참고 URL - https://youtu.be/7YEd8ECUTAk?si=Se90Wik0TuTMoX1w

DBeaver SQL 편집기 텍스트 작성시 영어 대문자 자동 적용 방법
참고 URL - https://jin2rang.tistory.com/entry/DBeaver-%EB%8C%80%EB%AC%B8%EC%9E%90-%EB%B3%80%ED%99%98-%EC%9E%90%EB%8F%99-%EB%8C%80%EB%AC%B8%EC%9E%90

Host 란에는 호스팅받은 데이터베이스 주소나 URL같은걸 Azure에서 가져와서 집어넣고
Username, Password 란에는 DB 접속용 아이디/비번 만든거 집어넣자.
그리고 연결눌러보면 여러분 데이터베이스에 접속해서 데이터를 구경할 수 있다.

하지만 이런 프로그램으로 접속해서 뭐함 다음시간엔 서버 코드에서 접속하는 방법을 알아보자.

[코딩애플] 쉽게 배우는 Spring Boot & JPA
Part 1
9강 - 서버에서 Database 연결 & JPA 설치

일단 데이터베이스부터 만들어보자.
저번시간에 만든거 아니냐고요?
실은 저번 시간엔 MySQL이라는 DBMS 호스팅을 받은 것이고
그 안에서 데이터를 실제로 저장하려면 '데이터베이스' 하나 만들어서 거기 저장해야한다.

▲ 정확히 말하면 테이블이라는게 엑셀같은 표인데 거기 데이터를 저장한다.
근데 그걸 모아놓은 폴더같은게 '데이터베이스'임

MYSQL에서는 데이터베이스(DB)를 스키마(Schema) 라고 부른다.

* 데이터베이스 생성은

DBeaver는 상단에서 SQL편집기 어쩌구를 열 수 있는데 거기서 SQL 코드를 짜서 실행할 수 있다.

CREATE DATABASE 데이터베이스명;

거기서 이런 코드 적고 실행하면 된다.

▲ DBeaver 왼쪽 파일트리("codingapplemysql0827.mysql.database.azure.com" -> "Databases") 같은 곳에서
마우스 우클릭해서 간편하게 데이터베이스를 만들 수도 있다.
저는 shop 이름의 데이터베이스를 만들어봤다.
여기다가 테이블만들고 데이터도 넣고 그래볼 것임

하지만 DBeaver 같은 곳에서 데이터 쪼물거릴 일은 거의 없고
보통은 서버에서 코드로 데이터 입출력 하는게 일반적이다.
그래서 서버 코드에서 이 데이터베이스에 접속 하려면 라이브러리 설치가 좀 필요하다.

* JPA와 MySQL 접속용 라이브러리 설치

dependencies {
  runtimeOnly 'com.mysql:mysql-connector-j'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
}

build.gradle 파일에 위처럼 dependencies 항목 추가하고 load gradle changes 버튼 누르면
JPA와 MySQL 접속도와주는 라이브러리가 설치 완료 된다.

위에 설치한 라이브러리 'com.mysql:mysql-connector-j', 'org.springframework.boot:spring-boot-starter-data-jpa' 가 필요로 하는 설정들은 아래와 같다.
spring.datasource.url=jdbc:mysql://호스팅받은곳엔드포인트주소/만든database이름
spring.datasource.username=DB접속아이디
spring.datasource.password=DB접속비번
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.properties.hibernate.show_sql=true   # JPA 문법쓸 때 SQL 따로 출력해줄지 여부
spring.jpa.hibernate.ddl-auto=update   # 코드짜서 테이블 생성(CREATE)이나 수정(UPDATE)시 그걸 자동으로 DB(데이터베이스)에도 반영할지 여부(update 해놓으면 변경사항만 반영되고 none 해놓으면 반영금지이다. none이 실제 서비스 배포 및 운영할 땐 안정적인데 update도 나쁘지는 않다.)

application.properties 파일이란?
- 웹서버 프로젝트의 환경변수, 설정(값)들을 보관하는 파일이다.

application.properties 파일에 위처럼 추가해두면 서버에서 MySQL 데이터베이스에 접속이 가능하다.
이제 서버띄울 때 Hikari pool 어쩌구 안내메세지가 뜨면 DB(데이터베이스)접속 잘 되었다는 뜻이다.

- 위의 4줄은 접속할 DB(데이터베이스)정보 입력하는 곳이고
- show_sql=true는 DB(데이터베이스)입출력시 SQL을 따로 실행창에 출력할지 여부
- ddl-auto=update는 코드짜서 테이블 생성(CREATE)이나 수정(UPDATE)시 그걸 자동으로 DB(데이터베이스)에도 반영할지입니다.

update 해놓으면 변경사항만 반영되고 none 해놓으면 반영금지이다.
none이 실제 서비스 배포 및 운영할 땐 안정적인데 update도 나쁘지는 않다.

* JPA가 뭐냐면

JPA가 뭐냐면 원래 관계형 데이터베이스는 SQL이라는 언어를 써서 데이터 입출력을해야하는데
그걸 좀 귀찮아하고 어려워하는 분들이 많다.
그래서 ORM이라는 라이브러리도 함께 설치해서 쓰는 경우가 많다.

ORM을 설치하면 SQL이 아니라 자바코드로 데이터 입출력을 해결할 수 있다.
테이블들을 클래스로 관리해서 타입체크도 되고 코드 재사용도 쉽고 여러 장점이 많다.
이거 쓰다가 마음에 안들면 직접 SQL 작성도 가능하다.

실은 지금 설치하는 라이브러리를 Hibernate라고도 부르는데
JPA는 뭐냐면 자바에서의 ORM 표준 문법같은거고
JPA 문법을 개발자들이 쓰기쉽게 만들어준게 Hibernate라는 라이브러리이다.
이게 제일 인기있어서 이거 JPA 어쩌구 설치하면 자동으로 Hibernate가 함께 설치되는 것임
그래서 JPA랑 Hibernate를 대충 혼용해서 많이 부른다.

* 왜 이건 runtimeOnly라고 쓰냐

runtimeOnly라고 적으면 코드를 컴파일할 때는 필요없는 라이브러리니까 컴파일 할 땐 쓰지말라는 소리이다.
이 라이브러리 만든 사람이 runtimeOnly라고 사용해도 상관없게 만들어놔서 그럴 뿐이다.

컴파일이뭐냐면 자바코드는 원래 실행하기 전에 컴퓨터 친화적인 바이트 코드로 변환해야하는데 그걸 컴파일이라고 부른다.
그래서 이렇게 쓰면 컴파일 되는 시간을 절약할 수 있다.
그러기 싫으면 그냥 implementation 써도 상관없다.

그래서 코드를 실제로 실행할 때만 필요한 라이브러리들은 runtimeOnly만 적어놔도 되는데
DB입출력 도와주는 라이브러리나 로그 출력용 라이브러리들이 이런걸 써도 된다.
나머지는 쓸 일이 없음

아니면 반대로 compileOnly 라고 적으면 얘는 컴파일할 때만 쓰라는 뜻이다.
그러면 개발할 때만 잠깐 쓰고 실제 서버구동시 필요없는 라이브러리들은 compileOnly 집어넣으면 나중에 용량을 절약할 수 있다.
나중에 써볼 것인데 코드 자동완성을 시켜주는 Lombok 라이브러리는 그런 식으로 설치해서 쓰기도 한다.

* Supabase 등에서 PostgreSQL 호스팅받아서 사용할 경우

dependencies {
  runtimeOnly 'org.postgresql:postgresql'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
}

build.gradle 파일에 위처럼 추가하고 load gradle changes 버튼 누르면
JPA와 PostgreSQL 접속도와주는 라이브러리가 설치 완료 된다.

spring.datasource.url=Supabase에 있던 Connection string
spring.datasource.username=Supabase에 있던 User
spring.datasource.password=Supabase에 있던 Password
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.properties.hibernate.show_sql=true
spring.jpa.hibernate.ddl-auto=update

Supabase 설정 들어가보면 JDBC버전의 Connection string, User, Password 정보를 가져올 수 있다.
그거 가져다가 application.properties 파일에 입력하자.
Connection string 복붙할 때 패스워드 넣는 부분이 있으면 넣어주자.

서버가 잘 안뜨면 이런걸 확인해보자.
- DB접속 주소 잘 붙여넣었는지
- DB접속용 아이디 비번 안틀렸는지
- 아니면 MySQL의 경우엔 application.properties 파일에 주소 기재할 때 엔드포인트주소:3306/데이터베이스이름 이렇게 붙여야 잘될 수 있음
- application.properties 문자들 마지막에 이상한 공백같은거 있으면 안됨



