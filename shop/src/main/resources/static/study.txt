[코딩애플] 쉽게 배우는 Spring Boot & JPA
Part 1
1강 - Spring Boot 왜 쓰는데
2강 - 개발환경 셋팅 / Spring Boot 3 프로젝트 생성

* intellij community 에디터 설치 방법
참고 URL - https://blog.naver.com/PostView.naver?blogId=djusti&logNo=223143383341
참고 2 URL - https://priming.tistory.com/50

* spring initializr 이용하여 프로젝트 생성
참고 URL - https://start.spring.io/
참고 2 URL - https://guns23.tistory.com/8

3강 - 자바 기본 문법 1 (변수, 함수, if, for)






[코딩애플] 쉽게 배우는 Spring Boot & JPA
Part 1
3강 - 자바 기본 문법 1 (변수, 함수, if, for)

변수, 함수, if, for 이런 기초 개념은 알고있다고 가정하고 진행할 것이다.
꼭 자바로 변수, 함수 이런걸 배울 필요없고 자바스크립트 같은 다른 언어로 배워와도 전혀 상관없다.
어짜피 다 똑같음
그래서 자바에서 변수, 함수, if, for 어떻게 쓰는지 빠르게 정리하고 가보자.

* 코드 어디에 적냐면

public static void main(String[] args) {
  SpringApplication.run(ShopApplication.class, args);
  코드~~
}

코드를 어디다가 적어야하냐면 어쩌구Application.java 파일(예 - ShopApplication.java)이 있을텐데
거기에 있는 main 함수안에 적으면 실행된다.
자바프로젝트 실행하면 main 함수안의 코드가 자동으로 실행이 되어서 그렇다.

* 변수 문법

자바에서도 당연히 변수를 만들어 쓸 수 있다.
어떤 자료를 잠깐 저장해두고 쓰고싶을 때 변수를 사용한다.

타입 변수명 = 변수에넣을값;
이렇게 코드짜면 변수생성 끝이다.

String name = "kim";
int age = 20;
float num = 1.5;

- 문자는 항상 큰 따옴표("") 안에 넣는다.
- 한 줄 끝나면 세미콜론(;)을 붙여야한다.
- 타입은 변수에 들어갈 자료의 타입(String, int, float 등등...)을 기재하면 된다.

저장할자료         | 타입이름
문자              | String
정수              | int
큰 정수(20억 이상)  | long
소수              | float
오차가 더 적은 소수  | double
true/false        | boolean

기본 타입은 이런 것들이 있다.

String lover = "김말자";
System.out.println(lover);

님들 여친 이름을 변수(lover)에 저장해서 출력해보자.
없으면 이번 기회에 자바로 만들자.
변수나 자료를 출력하고 싶으면 System.out.println() 안에 넣으면 된다.
IntelliJ 에디터에선 sout 라고 쓰고 엔터치면 System.out.println() 자동완성된다.

@SpringBootApplication
public class ShopApplication {

	public static void main(String[] args) {

		SpringApplication.run(ShopApplication.class, args);   // Spring boot로 만든 웹서버 띄우기
	}

}

코드 실행하려면 class 옆에 있는 재생버튼(▷) 누르면 된다.
참고로 한번 누르면 이제 에디터 상단에 있는 재생버튼(▷) 눌러도 된다.
재생버튼(▷) 생긴게 마음에 안들면 Debug 버튼(벌레 모양) 눌러도 된다.

코드 내용을 수정했으면 다시 정지(□)하고 재생(▷)눌러도 되는데
그게 싫으면 실시간으로 다시 컴파일해주는 기능도 있다.

ctrl + F9 누르면 된다.
맥은 command + F9임

* var 키워드

타입적는게 귀찮거나 무슨 타입 적어야할지 모르겠으면 var 이런 키워드를 사용해도 된다.
(Java 10버전 이상부터 사용가능)

var name = "kim";
var age = 20;

타입 자리에 var 적으면 얘가 알아서 타입을 유추해서 적용해준다.
편리하죠?

그래서 var 가끔쓰면 깔끔해보일 수 있어서 쓸지말지는 알아서 판단하면 되는데
실은 그런 코드스타일 같은건 같이 일하는 팀원들이랑 맞추는게 좋다.
참고로 자바 대용품으로 요즘은 Kotlin 언어를 많이 도입하는데 거기선 타입유추기능 쓰는 사람들이 많이 보이는거 같다.

* final 키워드 (상수)
가끔 final을 왼쪽에 붙여서 만들기도 하는데 이러면 변수에 들어있는 값을 나중에 바꿀 수 없다.

final int wifeCount = 0;
wifeCount = 20; //에러남

변수에 들어있는 값을 바꾸려고 하면 에러로 잡아준다.
그래서 바뀌면 큰일나는 값들을 저장할 때 주로 쓰도록 하자.
예를 들어 여러분의 여친숫자, 불알갯수 저장할 땐 final 붙이는게 어떨까요.

* if 조건문

if (조건) {
  조건이 참일 때 실행할 코드~~
}

특정 조건이 맞을 때만 코드를 실행하고 싶으면 if 조건문 안에 넣으면 된다.

int wifeCount = 0;

if (wifeCount == 0) {
  System.out.println("정상");
}

예를 들어 여러분의 여친 수량이 0일 때만 특정 코드를 실행하고 싶은 경우 위처럼 작성하면 된다.
조건자리에는 ==, !=, >, < 같은걸 사용하는 조건식을 주로 입력한다.

* for 반복문

비슷한 코드를 여러번 복붙하고 싶으면 for 꺼내서 쓰면 된다.

for (int i = 0; i < 3; i++) {
  복붙할 코드~~
}

위 코드는
(1) i를 0부터 시작해서
(2) i가 3이 되기 전까지
(3) i에 +1하면서 계속 복붙하라는 소리기 때문에
3번 복붙이 되겠군요. 이거 모르면 자바스크립트 기초강의 들을 시간임

* 함수

긴 코드 덩어리를 자주 재사용하고 싶을 때 함수를 만들어쓰기도 한다.
자바에서도 함수를 만들어서 쓸 수 있는데

public class ShopApplication {

  void 함수(){
    System.out.println("안녕");
  }

  public static void main(String[] args) {
    SpringApplication.run(ShopApplication.class, args);
  }
}

함수 만들고 싶으면 보통 class 안에 만들어서 가져다쓰면 된다.
함수이름(){} 이렇게 함수를 정의해둘 수 있고
함수정의 왼쪽에 return 타입을 넣으면 된다.
그니까 함수 안에 return이 있을 경우 return 하고 있는 자료가 무슨 타입인지 미리 적어놔야한다.
return이 없으면 void 라고 적으면 된다.

하지만 함수를 가져다가 쓰려면 new 키워드로 object를 뽑아서 쓰는게 일반적이라
그건 다음 시간에 class 배우면 알아보도록 하자.

